# ============================================================
# QC + READ CLEANING + HISAT2 ALIGNMENT (10 threads)
# IF YOUR COMPUTOR IS OLDER OR DOES HAVE 10 THREADS LOWER TO 4 
# More threads make it run faster but if you dont have enough it will crash 
# ============================================================
set -euo pipefail

THREADS=10
REF="../00_rawdata/NZ_CP076404.1.fasta"
SAMPLES=(SRR9613403 SRR9613404 SRR9613405)

# -------- prerequisites check (prints a friendly hint if missing) --------
need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing: $1"; MISSING=1; }; }
MISSING=0
for bin in fastqc multiqc fastp hisat2-build hisat2 samtools python3; do need "$bin"; done
if [ "$MISSING" -eq 1 ]; then
  echo "Install missing tools, e.g.:"
  echo "  sudo apt-get update && sudo apt-get install -y fastqc multiqc fastp hisat2 samtools python3 python3-pip python3-matplotlib python3-pandas"
  exit 1
fi

# -------- sanity checks --------
[[ -f "$REF" ]] || { echo "Reference not found: $REF"; exit 1; }

# Download reads if not present (ENA links). Safe to leave; skips if files exist.
download_if_missing() {
  local S=$1 BASE=$2
  [ -f ${S}_1.fastq.gz ] || wget -c ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR961/${BASE}/${S}/${S}_1.fastq.gz
  [ -f ${S}_2.fastq.gz ] || wget -c ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR961/${BASE}/${S}/${S}_2.fastq.gz
}
download_if_missing SRR9613403 003
download_if_missing SRR9613404 004
download_if_missing SRR9613405 005

# =========================
# 1) QC on RAW READS
# =========================
echo "[QC] FastQC on raw reads…"
fastqc --extract -t "$THREADS" \
  SRR9613403_1.fastq.gz SRR9613403_2.fastq.gz \
  SRR9613404_1.fastq.gz SRR9613404_2.fastq.gz \
  SRR9613405_1.fastq.gz SRR9613405_2.fastq.gz

echo "[QC] MultiQC (raw)…"
multiqc . -n multiqc_raw.html

# =========================
# 2) READ CLEANING (fastp)
# =========================
echo "[Trim] fastp on all samples…"
for S in "${SAMPLES[@]}"; do
  fastp \
    -i ${S}_1.fastq.gz -I ${S}_2.fastq.gz \
    -o ${S}_trimmed_1.fastq.gz -O ${S}_trimmed_2.fastq.gz \
    -q 20 -u 30 -n 5 -l 50 \
    --detect_adapter_for_pe \
    -w "$THREADS" \
    --html ${S}_fastp.html --json ${S}_fastp.json
done

echo "[QC] FastQC on trimmed reads…"
fastqc --extract -t "$THREADS" \
  SRR9613403_trimmed_1.fastq.gz SRR9613403_trimmed_2.fastq.gz \
  SRR9613404_trimmed_1.fastq.gz SRR9613404_trimmed_2.fastq.gz \
  SRR9613405_trimmed_1.fastq.gz SRR9613405_trimmed_2.fastq.gz

echo "[QC] MultiQC (post-trim)…"
multiqc . -n multiqc_post_trim.html

# =========================
# 3) QC TABLES
# =========================
echo -e "sample\traw_read_pairs\tduplication_rate_percent" > qc_raw_counts_duplicates.tsv
for S in "${SAMPLES[@]}"; do
  RAW=$(grep -A2 '"before_filtering"' ${S}_fastp.json | grep -m1 '"total_reads"' | sed 's/[^0-9]//g')
  D1=$(awk -F'\t' '/^Total Deduplicated Percentage/{print $2}' ${S}_1_fastqc/fastqc_data.txt | tr -d '%')
  D2=$(awk -F'\t' '/^Total Deduplicated Percentage/{print $2}' ${S}_2_fastqc/fastqc_data.txt | tr -d '%')
  if [[ -n "$D1" && -n "$D2" ]]; then
    DUP=$(awk -v a="$D1" -v b="$D2" 'BEGIN{printf "%.3f", 100 - ((a+b)/2)}')
  elif [[ -n "$D1" ]]; then
    DUP=$(awk -v a="$D1" 'BEGIN{printf "%.3f", 100 - a}')
  elif [[ -n "$D2" ]]; then
    DUP=$(awk -v b="$D2" 'BEGIN{printf "%.3f", 100 - b}')
  else
    DUP="NA"
  fi
  echo -e "${S}\t${RAW}\t${DUP}" >> qc_raw_counts_duplicates.tsv
done

echo -e "sample\traw_read_pairs\tcleaned_read_pairs\tkept_percent" > cleaning_raw_vs_trimmed.tsv
for S in "${SAMPLES[@]}"; do
  RAW=$(grep -A2 '"before_filtering"' ${S}_fastp.json | grep -m1 '"total_reads"' | sed 's/[^0-9]//g')
  CLEAN=$(grep -A2 '"after_filtering"'  ${S}_fastp.json | grep -m1 '"total_reads"' | sed 's/[^0-9]//g')
  KEPT=$(awk -v r="$RAW" -v c="$CLEAN" 'BEGIN{if(r>0) printf "%.2f", (c/r)*100; else print "0.00"}')
  echo -e "${S}\t${RAW}\t${CLEAN}\t${KEPT}" >> cleaning_raw_vs_trimmed.tsv
done

# =========================
# 4) HISAT2 ALIGNMENT
# =========================
echo "[Index] hisat2-build…"
hisat2-build -p "$THREADS" "$REF" hisat2_index

echo "[Align] HISAT2 -> BAM…"
for S in "${SAMPLES[@]}"; do
  R1=${S}_trimmed_1.fastq.gz
  R2=${S}_trimmed_2.fastq.gz
  BAM=${S}.sorted.bam

  echo "  - $S"
  hisat2 -p "$THREADS" -x hisat2_index -1 "$R1" -2 "$R2" \
    2> "${S}_hisat2.log" \
  | samtools sort -@ "$THREADS" -o "$BAM" -
  samtools index "$BAM"
  samtools flagstat "$BAM" > "${S}_flagstat.txt"
done

echo -e "sample\ttotal_reads\tmapped_reads\tmapping_percent" > alignment_summary.tsv
for S in "${SAMPLES[@]}"; do
  total=$(awk '/in total/ {print $1; exit}' "${S}_flagstat.txt")
  mapline=$(grep " mapped (" "${S}_flagstat.txt" | head -n1)
  mapped=$(awk '{print $1}' <<<"$mapline")
  pct=$(awk -F'[()%]' '{print $2}' <<<"$mapline" | tr -d '%')
  printf "%s\t%s\t%s\t%s\n" "$S" "$total" "$mapped" "$pct" >> alignment_summary.tsv
done

# =========================
# 5) PLOTS (PNG)
# =========================
python3 - <<'PY'
import pandas as pd, matplotlib.pyplot as plt, numpy as np
df = pd.read_csv("alignment_summary.tsv", sep="\t")
for col in ["mapping_percent","total_reads","mapped_reads"]:
    df[col] = pd.to_numeric(df[col], errors="coerce")

# Plot 1: mapping percent
plt.figure()
plt.bar(df["sample"], df["mapping_percent"])
plt.ylabel("Mapping (%)")
plt.title("HISAT2 Mapping Percentage")
plt.tight_layout()
plt.savefig("plot_mapping_percent.png", dpi=150)

# Plot 2: total vs mapped reads
x = np.arange(len(df))
w = 0.42
plt.figure()
plt.bar(x - w/2, df["total_reads"],  width=w, label="Total")
plt.bar(x + w/2, df["mapped_reads"], width=w, label="Mapped")
plt.xticks(x, df["sample"])
plt.ylabel("Reads")
plt.title("Total vs Mapped Reads")
plt.legend()
plt.tight_layout()
plt.savefig("plot_reads_total_vs_mapped.png", dpi=150)
PY

echo "All done."
echo "Deliverables to use:"
echo "  - QC plots: multiqc_raw.html (pre), multiqc_post_trim.html (post)"
echo "  - Tables: qc_raw_counts_duplicates.tsv, cleaning_raw_vs_trimmed.tsv"
echo "  - Alignment metrics: alignment_summary.tsv"
echo "  - Alignment plots: plot_mapping_percent.png, plot_reads_total_vs_mapped.png"
